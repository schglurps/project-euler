// The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
// The first ten terms would be:

// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

// Let us list the factors of the first seven triangle numbers:

//      1: 1
//      3: 1,3
//      6: 1,2,3,6
//     10: 1,2,5,10
//     15: 1,3,5,15
//     21: 1,3,7,21
//     28: 1,2,4,7,14,28

// We can see that 28 is the first triangle number to have over five divisors.
// What is the value of the first triangle number to have over five hundred divisors?

[<EntryPoint>]
let main argv =

    let countDivisors n =
        seq { 2..(n |> float |> sqrt |> int) }
        |> Seq.filter (fun i -> n % i = 0)
        |> Seq.sumBy (fun i -> 
            let other = n / i
            if i <> other then 2 else 1)

    let triangleNumbers =
        Seq.unfold (fun state ->
            let (current, operand) = state
            let nextValue = current + operand
            Some(nextValue, (nextValue, operand + 1))) (0, 1)

    triangleNumbers
    |> Seq.skipWhile (fun i -> countDivisors i <= 500)
    |> Seq.head
    |> printfn "%i"

    0